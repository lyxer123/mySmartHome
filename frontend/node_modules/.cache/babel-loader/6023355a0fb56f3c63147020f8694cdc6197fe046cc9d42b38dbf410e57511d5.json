{"ast":null,"code":"export default {\n  data() {\n    return {\n      temperature: '--',\n      humidity: '--',\n      deviceId: '--',\n      lastUpdate: '--',\n      isConnected: false\n    };\n  },\n  methods: {\n    async fetchData() {\n      try {\n        const response = await this.$axios.get('/sensor-data/latest');\n        this.temperature = response.data.temperature.toFixed(1);\n        this.humidity = response.data.humidity.toFixed(1);\n        this.deviceId = response.data.deviceId;\n        this.lastUpdate = new Date(response.data.receivedAt).toLocaleString();\n        this.isConnected = true;\n      } catch (error) {\n        console.error('Ëé∑ÂèñÊï∞ÊçÆÂ§±Ë¥•:', error);\n        this.isConnected = false;\n      }\n    }\n  },\n  created() {\n    this.fetchData();\n    this.interval = setInterval(this.fetchData, 10000);\n  },\n  beforeDestroy() {\n    clearInterval(this.interval);\n  }\n};","map":{"version":3,"names":["data","temperature","humidity","deviceId","lastUpdate","isConnected","methods","fetchData","response","$axios","get","toFixed","Date","receivedAt","toLocaleString","error","console","created","interval","setInterval","beforeDestroy","clearInterval"],"sources":["src/views/Dashboard.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <div class=\"dashboard\">\r\n      <div class=\"sensor-card temperature\">\r\n        <h2>Ê∏©Â∫¶</h2>\r\n        <div class=\"sensor-value\">{{ temperature }} ¬∞C</div>\r\n        <div class=\"sensor-icon\">üå°Ô∏è</div>\r\n      </div>\r\n      \r\n      <div class=\"sensor-card humidity\">\r\n        <h2>ÊπøÂ∫¶</h2>\r\n        <div class=\"sensor-value\">{{ humidity }} %</div>\r\n        <div class=\"sensor-icon\">üíß</div>\r\n      </div>\r\n    </div>\r\n    \r\n    <div class=\"status-panel\">\r\n      <div class=\"status-item\">\r\n        <span class=\"status-label\">ËÆæÂ§áID:</span>\r\n        <span class=\"status-value\">{{ deviceId }}</span>\r\n      </div>\r\n      <div class=\"status-item\">\r\n        <span class=\"status-label\">ÊúÄÂêéÊõ¥Êñ∞:</span>\r\n        <span class=\"status-value\">{{ lastUpdate }}</span>\r\n      </div>\r\n      <div class=\"status-item\">\r\n        <span class=\"status-label\">ËøûÊé•Áä∂ÊÄÅ:</span>\r\n        <span class=\"status-value\" :class=\"{ 'status-online': isConnected }\">\r\n          {{ isConnected ? 'Âú®Á∫ø' : 'Á¶ªÁ∫ø' }}\r\n        </span>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  data() {\r\n    return {\r\n      temperature: '--',\r\n      humidity: '--',\r\n      deviceId: '--',\r\n      lastUpdate: '--',\r\n      isConnected: false\r\n    }\r\n  },\r\n  methods: {\r\n    async fetchData() {\r\n      try {\r\n        const response = await this.$axios.get('/sensor-data/latest')\r\n        this.temperature = response.data.temperature.toFixed(1)\r\n        this.humidity = response.data.humidity.toFixed(1)\r\n        this.deviceId = response.data.deviceId\r\n        this.lastUpdate = new Date(response.data.receivedAt).toLocaleString()\r\n        this.isConnected = true\r\n      } catch (error) {\r\n        console.error('Ëé∑ÂèñÊï∞ÊçÆÂ§±Ë¥•:', error)\r\n        this.isConnected = false\r\n      }\r\n    }\r\n  },\r\n  created() {\r\n    this.fetchData()\r\n    this.interval = setInterval(this.fetchData, 10000)\r\n  },\r\n  beforeDestroy() {\r\n    clearInterval(this.interval)\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.dashboard {\r\n  display: flex;\r\n  justify-content: space-around;\r\n  flex-wrap: wrap;\r\n  margin-bottom: 30px;\r\n}\r\n\r\n.sensor-card {\r\n  background-color: white;\r\n  border-radius: 10px;\r\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\r\n  padding: 20px;\r\n  width: 45%;\r\n  min-width: 250px;\r\n  margin-bottom: 20px;\r\n  position: relative;\r\n  overflow: hidden;\r\n}\r\n\r\n.sensor-card h2 {\r\n  font-size: 1.5rem;\r\n  margin-bottom: 15px;\r\n  color: #555;\r\n}\r\n\r\n.sensor-value {\r\n  font-size: 3rem;\r\n  font-weight: bold;\r\n}\r\n\r\n.sensor-icon {\r\n  position: absolute;\r\n  right: 20px;\r\n  top: 20px;\r\n  font-size: 3rem;\r\n  opacity: 0.2;\r\n}\r\n\r\n.temperature {\r\n  background: linear-gradient(135deg, #fff 0%, #ffe8e8 100%);\r\n}\r\n\r\n.temperature .sensor-value {\r\n  color: #e74c3c;\r\n}\r\n\r\n.humidity {\r\n  background: linear-gradient(135deg, #fff 0%, #e3f2fd 100%);\r\n}\r\n\r\n.humidity .sensor-value {\r\n  color: #3498db;\r\n}\r\n\r\n.status-panel {\r\n  background-color: white;\r\n  border-radius: 10px;\r\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\r\n  padding: 20px;\r\n}\r\n\r\n.status-item {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  padding: 10px 0;\r\n  border-bottom: 1px solid #eee;\r\n}\r\n\r\n.status-item:last-child {\r\n  border-bottom: none;\r\n}\r\n\r\n.status-label {\r\n  font-weight: bold;\r\n  color: #555;\r\n}\r\n\r\n.status-value {\r\n  color: #777;\r\n}\r\n\r\n.status-online {\r\n  color: #2ecc71;\r\n  font-weight: bold;\r\n}\r\n\r\n@media (max-width: 768px) {\r\n  .sensor-card {\r\n    width: 100%;\r\n  }\r\n}\r\n</style>"],"mappings":"AAoCA;EACAA,KAAA;IACA;MACAC,WAAA;MACAC,QAAA;MACAC,QAAA;MACAC,UAAA;MACAC,WAAA;IACA;EACA;EACAC,OAAA;IACA,MAAAC,UAAA;MACA;QACA,MAAAC,QAAA,cAAAC,MAAA,CAAAC,GAAA;QACA,KAAAT,WAAA,GAAAO,QAAA,CAAAR,IAAA,CAAAC,WAAA,CAAAU,OAAA;QACA,KAAAT,QAAA,GAAAM,QAAA,CAAAR,IAAA,CAAAE,QAAA,CAAAS,OAAA;QACA,KAAAR,QAAA,GAAAK,QAAA,CAAAR,IAAA,CAAAG,QAAA;QACA,KAAAC,UAAA,OAAAQ,IAAA,CAAAJ,QAAA,CAAAR,IAAA,CAAAa,UAAA,EAAAC,cAAA;QACA,KAAAT,WAAA;MACA,SAAAU,KAAA;QACAC,OAAA,CAAAD,KAAA,YAAAA,KAAA;QACA,KAAAV,WAAA;MACA;IACA;EACA;EACAY,QAAA;IACA,KAAAV,SAAA;IACA,KAAAW,QAAA,GAAAC,WAAA,MAAAZ,SAAA;EACA;EACAa,cAAA;IACAC,aAAA,MAAAH,QAAA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}