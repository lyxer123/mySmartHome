{"ast":null,"code":"import * as echarts from 'echarts';\nexport default {\n  name: 'App',\n  data() {\n    return {\n      temperature: '--',\n      humidity: '--',\n      deviceId: '--',\n      lastUpdate: '--',\n      isConnected: false,\n      activeChart: 'temperature',\n      chartInstance: null,\n      historicalData: [],\n      pollingInterval: null\n    };\n  },\n  mounted() {\n    this.fetchLatestData();\n    this.fetchHistoricalData();\n\n    // 设置轮询间隔\n    this.pollingInterval = setInterval(() => {\n      this.fetchLatestData();\n    }, 10000); // 每10秒更新一次\n\n    // 每分钟更新历史数据\n    setInterval(() => {\n      this.fetchHistoricalData();\n    }, 60000);\n\n    // 监听窗口大小变化，调整图表大小\n    window.addEventListener('resize', this.resizeChart);\n  },\n  beforeDestroy() {\n    clearInterval(this.pollingInterval);\n    window.removeEventListener('resize', this.resizeChart);\n    if (this.chartInstance) {\n      this.chartInstance.dispose();\n    }\n  },\n  watch: {\n    activeChart() {\n      this.updateChart();\n    },\n    historicalData() {\n      this.updateChart();\n    }\n  },\n  methods: {\n    async fetchLatestData() {\n      try {\n        const response = await fetch('http://localhost:3000/api/sensor-data/latest');\n        if (response.ok) {\n          const data = await response.json();\n          this.temperature = data.temperature.toFixed(1);\n          this.humidity = data.humidity.toFixed(1);\n          this.deviceId = data.deviceId;\n          this.lastUpdate = new Date(data.receivedAt).toLocaleString();\n          this.isConnected = true;\n        } else {\n          console.error('获取最新数据失败');\n          this.isConnected = false;\n        }\n      } catch (error) {\n        console.error('API请求错误:', error);\n        this.isConnected = false;\n      }\n    },\n    async fetchHistoricalData() {\n      try {\n        const response = await fetch('http://localhost:3000/api/sensor-data');\n        if (response.ok) {\n          const data = await response.json();\n          this.historicalData = data.readings;\n          this.initChart();\n        } else {\n          console.error('获取历史数据失败');\n        }\n      } catch (error) {\n        console.error('API请求错误:', error);\n      }\n    },\n    initChart() {\n      if (!this.$refs.chartContainer) return;\n      if (!this.chartInstance) {\n        this.chartInstance = echarts.init(this.$refs.chartContainer);\n      }\n      this.updateChart();\n    },\n    updateChart() {\n      if (!this.chartInstance || this.historicalData.length === 0) return;\n      const dataType = this.activeChart;\n      const title = dataType === 'temperature' ? '温度历史' : '湿度历史';\n      const yAxisName = dataType === 'temperature' ? '温度 (°C)' : '湿度 (%)';\n      const color = dataType === 'temperature' ? '#ff6b6b' : '#4dabf7';\n      const times = this.historicalData.map(item => {\n        return new Date(item.receivedAt).toLocaleTimeString();\n      });\n      const values = this.historicalData.map(item => {\n        return dataType === 'temperature' ? item.temperature : item.humidity;\n      });\n      const option = {\n        title: {\n          text: title,\n          left: 'center'\n        },\n        tooltip: {\n          trigger: 'axis'\n        },\n        xAxis: {\n          type: 'category',\n          data: times,\n          axisLabel: {\n            rotate: 45\n          }\n        },\n        yAxis: {\n          type: 'value',\n          name: yAxisName\n        },\n        series: [{\n          name: yAxisName,\n          type: 'line',\n          data: values,\n          smooth: true,\n          itemStyle: {\n            color: color\n          },\n          areaStyle: {\n            color: {\n              type: 'linear',\n              x: 0,\n              y: 0,\n              x2: 0,\n              y2: 1,\n              colorStops: [{\n                offset: 0,\n                color: color\n              }, {\n                offset: 1,\n                color: 'rgba(255, 255, 255, 0.3)'\n              }]\n            }\n          }\n        }],\n        grid: {\n          left: '3%',\n          right: '4%',\n          bottom: '15%',\n          containLabel: true\n        }\n      };\n      this.chartInstance.setOption(option);\n    },\n    resizeChart() {\n      if (this.chartInstance) {\n        this.chartInstance.resize();\n      }\n    }\n  }\n};","map":{"version":3,"names":["echarts","name","data","temperature","humidity","deviceId","lastUpdate","isConnected","activeChart","chartInstance","historicalData","pollingInterval","mounted","fetchLatestData","fetchHistoricalData","setInterval","window","addEventListener","resizeChart","beforeDestroy","clearInterval","removeEventListener","dispose","watch","updateChart","methods","response","fetch","ok","json","toFixed","Date","receivedAt","toLocaleString","console","error","readings","initChart","$refs","chartContainer","init","length","dataType","title","yAxisName","color","times","map","item","toLocaleTimeString","values","option","text","left","tooltip","trigger","xAxis","type","axisLabel","rotate","yAxis","series","smooth","itemStyle","areaStyle","x","y","x2","y2","colorStops","offset","grid","right","bottom","containLabel","setOption","resize"],"sources":["src/App.vue"],"sourcesContent":["<template>\r\n  <div id=\"app\">\r\n    <header>\r\n      <h1>智能家居温湿度监测系统</h1>\r\n    </header>\r\n    \r\n    <main>\r\n      <div class=\"dashboard\">\r\n        <div class=\"sensor-card temperature\">\r\n          <h2>温度</h2>\r\n          <div class=\"sensor-value\">{{ temperature }} °C</div>\r\n          <div class=\"sensor-icon\">🌡️</div>\r\n        </div>\r\n        \r\n        <div class=\"sensor-card humidity\">\r\n          <h2>湿度</h2>\r\n          <div class=\"sensor-value\">{{ humidity }} %</div>\r\n          <div class=\"sensor-icon\">💧</div>\r\n        </div>\r\n      </div>\r\n      \r\n      <div class=\"chart-container\">\r\n        <h2>历史数据</h2>\r\n        <div class=\"chart-tabs\">\r\n          <button \r\n            :class=\"{ active: activeChart === 'temperature' }\" \r\n            @click=\"activeChart = 'temperature'\"\r\n          >\r\n            温度图表\r\n          </button>\r\n          <button \r\n            :class=\"{ active: activeChart === 'humidity' }\" \r\n            @click=\"activeChart = 'humidity'\"\r\n          >\r\n            湿度图表\r\n          </button>\r\n        </div>\r\n        <div class=\"chart\" ref=\"chartContainer\"></div>\r\n      </div>\r\n      \r\n      <div class=\"status-panel\">\r\n        <div class=\"status-item\">\r\n          <span class=\"status-label\">设备ID:</span>\r\n          <span class=\"status-value\">{{ deviceId }}</span>\r\n        </div>\r\n        <div class=\"status-item\">\r\n          <span class=\"status-label\">最后更新:</span>\r\n          <span class=\"status-value\">{{ lastUpdate }}</span>\r\n        </div>\r\n        <div class=\"status-item\">\r\n          <span class=\"status-label\">连接状态:</span>\r\n          <span class=\"status-value\" :class=\"{ 'status-online': isConnected }\">\r\n            {{ isConnected ? '在线' : '离线' }}\r\n          </span>\r\n        </div>\r\n      </div>\r\n    </main>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport * as echarts from 'echarts';\r\n\r\nexport default {\r\n  name: 'App',\r\n  data() {\r\n    return {\r\n      temperature: '--',\r\n      humidity: '--',\r\n      deviceId: '--',\r\n      lastUpdate: '--',\r\n      isConnected: false,\r\n      activeChart: 'temperature',\r\n      chartInstance: null,\r\n      historicalData: [],\r\n      pollingInterval: null\r\n    };\r\n  },\r\n  mounted() {\r\n    this.fetchLatestData();\r\n    this.fetchHistoricalData();\r\n    \r\n    // 设置轮询间隔\r\n    this.pollingInterval = setInterval(() => {\r\n      this.fetchLatestData();\r\n    }, 10000); // 每10秒更新一次\r\n    \r\n    // 每分钟更新历史数据\r\n    setInterval(() => {\r\n      this.fetchHistoricalData();\r\n    }, 60000);\r\n    \r\n    // 监听窗口大小变化，调整图表大小\r\n    window.addEventListener('resize', this.resizeChart);\r\n  },\r\n  beforeDestroy() {\r\n    clearInterval(this.pollingInterval);\r\n    window.removeEventListener('resize', this.resizeChart);\r\n    if (this.chartInstance) {\r\n      this.chartInstance.dispose();\r\n    }\r\n  },\r\n  watch: {\r\n    activeChart() {\r\n      this.updateChart();\r\n    },\r\n    historicalData() {\r\n      this.updateChart();\r\n    }\r\n  },\r\n  methods: {\r\n    async fetchLatestData() {\r\n      try {\r\n        const response = await fetch('http://localhost:3000/api/sensor-data/latest');\r\n        if (response.ok) {\r\n          const data = await response.json();\r\n          this.temperature = data.temperature.toFixed(1);\r\n          this.humidity = data.humidity.toFixed(1);\r\n          this.deviceId = data.deviceId;\r\n          this.lastUpdate = new Date(data.receivedAt).toLocaleString();\r\n          this.isConnected = true;\r\n        } else {\r\n          console.error('获取最新数据失败');\r\n          this.isConnected = false;\r\n        }\r\n      } catch (error) {\r\n        console.error('API请求错误:', error);\r\n        this.isConnected = false;\r\n      }\r\n    },\r\n    async fetchHistoricalData() {\r\n      try {\r\n        const response = await fetch('http://localhost:3000/api/sensor-data');\r\n        if (response.ok) {\r\n          const data = await response.json();\r\n          this.historicalData = data.readings;\r\n          this.initChart();\r\n        } else {\r\n          console.error('获取历史数据失败');\r\n        }\r\n      } catch (error) {\r\n        console.error('API请求错误:', error);\r\n      }\r\n    },\r\n    initChart() {\r\n      if (!this.$refs.chartContainer) return;\r\n      \r\n      if (!this.chartInstance) {\r\n        this.chartInstance = echarts.init(this.$refs.chartContainer);\r\n      }\r\n      \r\n      this.updateChart();\r\n    },\r\n    updateChart() {\r\n      if (!this.chartInstance || this.historicalData.length === 0) return;\r\n      \r\n      const dataType = this.activeChart;\r\n      const title = dataType === 'temperature' ? '温度历史' : '湿度历史';\r\n      const yAxisName = dataType === 'temperature' ? '温度 (°C)' : '湿度 (%)';\r\n      const color = dataType === 'temperature' ? '#ff6b6b' : '#4dabf7';\r\n      \r\n      const times = this.historicalData.map(item => {\r\n        return new Date(item.receivedAt).toLocaleTimeString();\r\n      });\r\n      \r\n      const values = this.historicalData.map(item => {\r\n        return dataType === 'temperature' ? item.temperature : item.humidity;\r\n      });\r\n      \r\n      const option = {\r\n        title: {\r\n          text: title,\r\n          left: 'center'\r\n        },\r\n        tooltip: {\r\n          trigger: 'axis'\r\n        },\r\n        xAxis: {\r\n          type: 'category',\r\n          data: times,\r\n          axisLabel: {\r\n            rotate: 45\r\n          }\r\n        },\r\n        yAxis: {\r\n          type: 'value',\r\n          name: yAxisName\r\n        },\r\n        series: [\r\n          {\r\n            name: yAxisName,\r\n            type: 'line',\r\n            data: values,\r\n            smooth: true,\r\n            itemStyle: {\r\n              color: color\r\n            },\r\n            areaStyle: {\r\n              color: {\r\n                type: 'linear',\r\n                x: 0,\r\n                y: 0,\r\n                x2: 0,\r\n                y2: 1,\r\n                colorStops: [\r\n                  {\r\n                    offset: 0,\r\n                    color: color\r\n                  },\r\n                  {\r\n                    offset: 1,\r\n                    color: 'rgba(255, 255, 255, 0.3)'\r\n                  }\r\n                ]\r\n              }\r\n            }\r\n          }\r\n        ],\r\n        grid: {\r\n          left: '3%',\r\n          right: '4%',\r\n          bottom: '15%',\r\n          containLabel: true\r\n        }\r\n      };\r\n      \r\n      this.chartInstance.setOption(option);\r\n    },\r\n    resizeChart() {\r\n      if (this.chartInstance) {\r\n        this.chartInstance.resize();\r\n      }\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style>\r\n* {\r\n  margin: 0;\r\n  padding: 0;\r\n  box-sizing: border-box;\r\n}\r\n\r\nbody {\r\n  font-family: 'Helvetica Neue', Arial, sans-serif;\r\n  background-color: #f5f7fa;\r\n  color: #333;\r\n  line-height: 1.6;\r\n}\r\n\r\n#app {\r\n  max-width: 1200px;\r\n  margin: 0 auto;\r\n  padding: 20px;\r\n}\r\n\r\nheader {\r\n  text-align: center;\r\n  margin-bottom: 30px;\r\n}\r\n\r\nheader h1 {\r\n  color: #2c3e50;\r\n  font-size: 2.5rem;\r\n}\r\n\r\n.dashboard {\r\n  display: flex;\r\n  justify-content: space-around;\r\n  flex-wrap: wrap;\r\n  margin-bottom: 30px;\r\n}\r\n\r\n.sensor-card {\r\n  background-color: white;\r\n  border-radius: 10px;\r\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\r\n  padding: 20px;\r\n  width: 45%;\r\n  min-width: 250px;\r\n  margin-bottom: 20px;\r\n  position: relative;\r\n  overflow: hidden;\r\n}\r\n\r\n.sensor-card h2 {\r\n  font-size: 1.5rem;\r\n  margin-bottom: 15px;\r\n  color: #555;\r\n}\r\n\r\n.sensor-value {\r\n  font-size: 3rem;\r\n  font-weight: bold;\r\n}\r\n\r\n.sensor-icon {\r\n  position: absolute;\r\n  right: 20px;\r\n  top: 20px;\r\n  font-size: 3rem;\r\n  opacity: 0.2;\r\n}\r\n\r\n.temperature {\r\n  background: linear-gradient(135deg, #fff 0%, #ffe8e8 100%);\r\n}\r\n\r\n.temperature .sensor-value {\r\n  color: #e74c3c;\r\n}\r\n\r\n.humidity {\r\n  background: linear-gradient(135deg, #fff 0%, #e3f2fd 100%);\r\n}\r\n\r\n.humidity .sensor-value {\r\n  color: #3498db;\r\n}\r\n\r\n.chart-container {\r\n  background-color: white;\r\n  border-radius: 10px;\r\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\r\n  padding: 20px;\r\n  margin-bottom: 30px;\r\n}\r\n\r\n.chart-container h2 {\r\n  text-align: center;\r\n  margin-bottom: 20px;\r\n  color: #555;\r\n}\r\n\r\n.chart-tabs {\r\n  display: flex;\r\n  justify-content: center;\r\n  margin-bottom: 20px;\r\n}\r\n\r\n.chart-tabs button {\r\n  background-color: #f1f1f1;\r\n  border: none;\r\n  padding: 10px 20px;\r\n  margin: 0 5px;\r\n  cursor: pointer;\r\n  border-radius: 5px;\r\n  font-weight: bold;\r\n  transition: all 0.3s ease;\r\n}\r\n\r\n.chart-tabs button.active {\r\n  background-color: #3498db;\r\n  color: white;\r\n}\r\n\r\n.chart {\r\n  height: 400px;\r\n  width: 100%;\r\n}\r\n\r\n.status-panel {\r\n  background-color: white;\r\n  border-radius: 10px;\r\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\r\n  padding: 20px;\r\n}\r\n\r\n.status-item {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  padding: 10px 0;\r\n  border-bottom: 1px solid #eee;\r\n}\r\n\r\n.status-item:last-child {\r\n  border-bottom: none;\r\n}\r\n\r\n.status-label {\r\n  font-weight: bold;\r\n  color: #555;\r\n}\r\n\r\n.status-value {\r\n  color: #777;\r\n}\r\n\r\n.status-online {\r\n  color: #2ecc71;\r\n  font-weight: bold;\r\n}\r\n\r\n@media (max-width: 768px) {\r\n  .sensor-card {\r\n    width: 100%;\r\n  }\r\n}\r\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}